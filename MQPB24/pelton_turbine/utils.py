from openai import OpenAI

def get_chat_completion(prompt, model="gpt-4o"):
    """
    Function to get chat completion from OpenAI's API.
    
    Args:
        prompt (str): The user prompt or question.
        model (str): The model to use for completion. Defaults to "gpt-4o-mini".
    
    Returns:
        str: The AI's response to the prompt.
    """
    client = OpenAI()
    
    completion = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": "You are an expert in fluid dynamics and turbomachinery design. You give concise answers and you answer exactly what you are asked. You are also well documented on Pelton turbine that are part of very small scale experiments. You never use markdown. ONLY USE TEXT, PLAINTEXT. You can understand experimental conditions if they are written in Japanese to you."},
            {"role": "user", "content": f"Using the following experimental description: {prompt}, write a Python function that will calculate the following parameters for a Pelton turbine: bucket depth(meters), bucket angle(degrees), bucket spacing(meters) and nozzle alignment(meters). The Python function has to take in the following parameters: flow rate(liters per second), nozzle diameter(millimeters), distance from nozzle to pelton turbine(millimeters). The function will then output the bucket depth (mm), bucket angle (degrees), bucket spacing (mm) and nozzle alignment (mm) for us to display in our app. Make sure you only write the function. Nothing else and avoid mardowns or anything. Just plain text as we will directly use this output as a function in our program. The name of the function needs to be calculate_pelton_parameters. The function will return a dictionary with the following keys: bucket_depth, bucket_angle, bucket_spacing, nozzle_alignment."}
        ]
    )
    
    return completion.choices[0].message.content

def execute_pelton_turbine_function(prompt, flow_rate, nozzle_diameter, distance):
    """
    Executes the Python function generated by the AI for Pelton turbine calculations.
    
    Args:
        flow_rate (float): The flow rate of the fluid.
        nozzle_diameter (float): The diameter of the nozzle.
        distance (float): The distance from the nozzle to the Pelton turbine.
    
    Returns:
        dict: A dictionary containing the calculated parameters: bucket depth, bucket angle, bucket spacing, and nozzle alignment.
    """

    # Get the function code from the AI
    function_code = get_chat_completion(prompt)

    # Define a local dictionary to execute the function code
    local_vars = {}

    # Execute the function code
    exec(function_code, {}, local_vars)

    # Assuming the function is named 'calculate_pelton_parameters'
    if 'calculate_pelton_parameters' in local_vars:
        calculate_pelton_parameters = local_vars['calculate_pelton_parameters']
        # Call the function with the provided parameters
        return calculate_pelton_parameters(flow_rate, nozzle_diameter, distance)
    else:
        raise ValueError("The AI did not return a valid function.")
    

def generate_pelton_turbine_image():
    client = OpenAI()
    
    response = client.images.generate(
        model="dall-e-3",
        prompt="Draw a small realistic Pelton Turbine. Maintain the size and scale.",
        size="1024x1024",
        quality="standard",
        n=1,
    )
    
    image_url = response.data[0].url
    return image_url

def get_pelton_turbine_review(bucket_depth, bucket_angle, bucket_spacing, nozzle_alignment):
    """
    Function to get an AI review paragraph on the efficiency of a Pelton turbine
    based on its calculated parameters.
    
    Args:
        bucket_depth (float): The depth of the bucket.
        bucket_angle (float): The angle of the bucket.
        bucket_spacing (float): The spacing between buckets.
        nozzle_alignment (float): The alignment of the nozzle.
    
    Returns:
        str: An AI-generated review paragraph on the efficiency of the Pelton turbine.
    """
    prompt = (
        f"Review the efficiency of a Pelton turbine with the following parameters: "
        f"bucket depth: {bucket_depth}, bucket angle: {bucket_angle}, "
        f"bucket spacing: {bucket_spacing}, nozzle alignment: {nozzle_alignment}. "
        f"Provide a concise explanation on how these parameters affect the turbine's efficiency. Rewrite the parameter first and then explain its impact. Keep it very short."
    )
    
    client = OpenAI()
    
    completion = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are an expert in fluid dynamics and turbomachinery design. Provide a detailed review on the efficiency of a Pelton turbine based on given parameters. Be concise and only give a review based on the parameters provided."},
            {"role": "user", "content": prompt}
        ]
    )
    
    return completion.choices[0].message.content